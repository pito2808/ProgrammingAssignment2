load(url("http://bit.ly/dasi_nc"))
gained_clean=na.omit(nc$gained)
gained_clean
length(gained_clean)
n <- length(gained_clean)
n
length(nc$gained)
boot_means = rep(NA, 100)
for(i in 1:100) {
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
hist(boot_means)
boot_means
length(boot_means)
plot(boot_means)
summary(boot_means)
sd(boot_means)
?sd
hist(boot_means)
source("http://bit.ly/dasi_inference")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.9, est = "mean",
boot_method = "perc")
sd(boot_sample)
sd(boot_means)
sd(nc$gained)
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "mean",
boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "mean",
boot_method = "se")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median",
boot_method = "se")
plot(nc$habit,nc$weight)
by(nc$weight, nc$habit,mean)
?by
by(nc$weight, nc$habit,length)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
summary(nc$mage)
nc$mature
?by
by(nc$mature,nc$mage,summary)
by(nc$mage, nc$mature,summary)
load(url("http://bit.ly/dasi_nc"))
load(url("http://bit.ly/dasi_gss_ws_cl"))
?dist
head(gss)
summary(gss)
hist(gss$lower)
hist(gss$wordsum,gss$lower)
hist(gss$wordsum)
?hist
by(gss$wordsum,gs$lower,summary)
by(gss$wordsum,gss$lower,summary)
by(gss$wordsum,gss$class,summary)
hist(gss$wordsum,gss$class)
hist(gss$wordsum,xlab=gss$class)
inference(y = gss$wordsum, x = gss$class, est = "mean", type = "ht",
alternative = "greater", method = "theoretical")
source("http://bit.ly/dasi_inference")
load(url("http://www.openintro.org/stat/data/atheism.RData"))
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year ==
"2012")
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
plot(mlb11$runs ~ mlb11$at_bats)
plot( mlb11$at_bats ~ mlb11$runs)
plot(mlb11$runs ~ mlb11$at_bats)
cor(mlb11$runs,mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
splot(mlb11$runs ~ mlb11$homeruns)
plot(mlb11$runs ~ mlb11$homeruns)
plot(mlb11$homeruns ~ mlb11$runs)
plot(mlb11$runs ~ mlb11$homeruns)
m2 <- lm(runs ~ homeruns , data = mlb11)
summary(m2)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
plot_ss(mlb11$runs ~ mlb11$at_bats)
plot_ss(y =mlb11$runs, x= mlb11$at_bats)
mlb11$run
mlb11$at_bats
plot(m1$residuals ~ mlb11$at_bats)
abline(h=0, lty =3)
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)
plot(mlb11$runs ~ mlb11$hits)
plot(mlb11$runs ~ mlb11$wins)
plot(mlb11$runs ~ mlb11$bat_avg)
cor(mlb11$runs ~ mlb11$bat_avg)
cor(mlb11$runs,mlb11$bat_avg)
cor(mlb11$runs,mlb11$wins)
cor(mlb11$runs,mlb11$hits)
mhits <- lm(runs ~ hits, data = mlb11)
summary(mhits)
mbat_avg <- lm(runs ~ bat_avg, data = mlb11)
summary(mba_avg)
summary(mbat_avg)
summary(mbat_avg)
plot(mlb11$runs ~ mlb11$bat_avg)
abline(mbat_avg)
plot(mlb11$runs ~ mlb11$hits)
abline(mhits)
cor(mlb11$runs, mlb11$new_obs)
cor(mlb11$runs, mlb11$new_slug)
cor(mlb11$runs, mlb11$new_onbase)
mobs <- lm(runs, new_obs,data = mlb11)
mobs <- lm(runs ~ new_obs,data = mlb11)
plot(mlb11$runs ~ mlb11$now_obs)
plot(mlb11$runs ~ mlb11$new_obs)
abline(mobs)
summary(mobs)
plot(mobs$residuals ~ mlb11$new_obs)
hist(mobs$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)
mslug <- lm(runs ~ new_slug,data = mlb11)
plot(mlb11$runs ~ mlb11$new_slug)
abline(mslug)
summary(mslug)
load(url("http://www.openintro.org/stat/data/evals.RData"))
names(evals)
hist(evals$score)
summar(eval$score)
summary(eval$score)
summary(evals$score)
evals
evals$score
evals$score <= 3
evals[evals$score <= 3,]
evals[evals$score < 3,]
names(evals)
plot(evals$score ~ evals$age + evals$bty_avg + evals$rank)
plot(evals$score ~ evals$bty_avg)
?jitter
plot(evals$score ~ jitter(evals$bty_avg)
)
plot(jitter(evals$score) ~ evals$bty_avg)
lm_bty <- lm(evals$score ~ evals$vty_avg)
lm_bty <- lm(evals$score, evals$vty_avg)
?lm
lm_bty <- lm(evals$score ~ evals$vty_avg)
lm_bty <- lm(evals$score ~ evals$bty_avg)
summary(lm_bty)
plot(lm_bty$residuals ~ evals$bty_avg)
hist(lm_bty$residuals)
qqnorm(lm_bty$residuals)
qqline(lm_bty$residuals)
cor(evals$score, evals$bty_avg)
0.1871424*0.1871424
plot(evals$bty_avg ~
evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[, 13:19])
m_bty_gen <- lm(score ~
bty_avg + gender, data = evals)
summary(m_bty_gen)
plot(m_bty_gen$residuals ~ evals$gender)
plot(m_bty_gen$residuals ~ evals$bty_avg)
hist(m_bty_gen$residuals)
qqnorm(m_bty_gen$residuals)
qqline(m_bty_gen$residuals)
multiLines(m_bty_gen)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
multiLines(m_bty_rank)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m1 <- lm(score ~
ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)$adj.r.squared
m2 <- lm(score ~
rank +  gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m2)$adj.r.squared
m3 <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits , data = evals)
summary(m3)$adj.r.squared
m4 <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m4)$adj.r.squared
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+  cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m5 <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+  cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m5)$adj.r.squared
sum(dbinom(4:20,20,0.1))
dbinom(1,5,0.2)
dbinom(2,10,0.1)
dbinom(2,10,0.2)
dbinom(3,15,0.1)
dbinom(3,15,0.2)
pf(3.47,2,830, lower.tail=FALSE)
install.packages("KernSmooth")
library("KernSmooth")
a <- available.packages()
a
head(rownames(a),3)
head(rownames(a),4)
install.packages('slidify')
install.packages('KernSmooth')
library(KernSmooth)
setwd("D:/MOOC/coursera - R Programming")
source('ass2.R')
makeVector(c(5,5,9,10))
cachemean
cachemean(x)
v <- makeVector(c(5,5,9,10))
v
v$get
cachemean(v)
c(2:19)
cachemean(v)
testrand <- matrix(data=rnorm(4),nrow=2, ncol=2)
testrand
solve(testrand)
inv <- solve(testrand)
testrand * inv
testrand %*% inv
makeCacheMatrix(testrand)
source('ass2matrix.R')
makeCacheMatrix(testrand)
source('ass2matrix.R')
source('ass2matrix.R')
makeCacheMatrix(testrand)
testrand
inv
makeCacheMatrix(c(1:4))
source('ass2matrix.R')
source('ass2matrix.R')
test <- makeCacheMatrix(testrand)
makeCacheMatrix(testrand)
source('ass2matrix.R')
makeCacheMatrix(testrand)
makeCacheMatrix(testrand)
source('ass2matrix.R')
makeCacheMatrix(testrand)
source('ass2matrix.R')
test <- makeCacheMatrix(testrand)
test
cacheSolve(test)
cacheSolve(test)
testrand <- matrix(data=rnorm(10000),nrow=100, ncol=100)
test <- makeCacheMatrix(testrand)
cacheSolve(test)
cacheSolve(test)
inv <- cacheSolve(test)
testrand %*% inv
setwd("D:/MOOC/coursera - R Programming/ass2/ProgrammingAssignment2")
source('cachematrix.R')
testrand <- matrix(data=rnorm(4),nrow=2, ncol=2)
t <- makeCacheMatrix(testrand)
cacheSolve(t)
t
cacheSolve(t)
source('cachematrix.R')
t <- makeCacheMatrix(testrand)
cacheSolve(t)
i <- cacheSolve(t)
t %*% i
t
testrand %*% i
cacheSolve(t)
cacheSolve(t)
source('cachematrix.R')
makeCacheMatrix(testrand)
t <- makeCacheMatrix(testrand)
cacheSolve(t)
cacheSolve(t)
source('cachematrix.R')
t <- makeCacheMatrix(testrand)
cacheSolve(t)
cacheSolve(t)
